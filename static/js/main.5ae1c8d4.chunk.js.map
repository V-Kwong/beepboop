{"version":3,"sources":["logger.ts","HistoryTableHeader.tsx","HabitHistory.tsx","DailyHistory.tsx","UserHistory.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["logger","setLevel","HistoryTableHeader","props","context","useContext","AppContext","className","onClick","window","open","title","dates","map","day","format","toString","md","require","Habit","historyMap","Map","habit","text","history","debug","record","taskDate","dayjs","date","DATE_KEY_FORMAT","JSON","stringify","undefined","scoredUp","scoredDown","set","dailyScores","score","get","filter","length","showNoHistory","dangerouslySetInnerHTML","__html","render","HabitScore","up","down","Date","colour","join","DailyHistory","useState","setShowNoHistory","data","daily","type","id","Daily","i","delta","value","taskUpdateTime","cronIntervals","search","unix","oneDayAgo","subtract","has","warn","console","groupEnd","dailyDeltas","DailyStatus","symbol","classNames","push","HABITICA_API_URL","CLIENT_KEY","TASKS_PATH","getWindowDimensions","width","innerWidth","height","innerHeight","setRandConfettiNum","min","max","Math","ceil","floor","random","React","createContext","showTaskIcons","Array","IntervalTree","UserHistory","windowDimensions","setWindowDimensions","showConfetti","setShowConfetti","numberOfPieces","setNumberOfPieces","isLoadingUserData","setLoadingUserData","isLoadingTaskData","setLoadingTaskData","isLoadingTodoData","setLoadingTodoData","numDaysToShow","cronTimes","setCronTimes","habits","setHabits","dailys","setDailys","setTodos","userId","userApiKey","fetchWithApiKey","url","fetch","method","headers","handleApiError","res","success","Error","message","setError","readData","then","json","result","task","log","error","scoreTask","taskId","useEffect","handleResize","addEventListener","removeEventListener","exp","cronTime","forEach","range","insert","numDays","appContext","fill","_","reverse","startOf","Provider","slice","Button","variant","run","onConfettiComplete","recycle","tweenDuration","AppState","App","setUserId","setUserApiKey","USER_INPUT_ACCEPTED","appState","setAppState","PROMPT_FOR_USER_CREDS","ERROR","href","target","rel","onChange","event","minLength","preventDefault","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5ae1c8d4.chunk.js","sourcesContent":["import logger from 'loglevel';\n\nif (process.env.NODE_ENV === 'development') {\n  logger.setLevel(\"WARN\");\n} else {\n  logger.setLevel(\"ERROR\");\n}\n\nexport default logger;","import React, { useContext } from \"react\";\nimport { UnfoldIcon, FoldIcon } from \"@primer/octicons-react\";\n\nimport { AppContext } from \"./UserHistory\";\n\nexport default function HistoryTableHeader(props: {\n  title: string;\n  setShowNoHistory: (val: boolean) => void;\n  showNoHistory: boolean;\n}) {\n  const context = useContext(AppContext);\n  const openHabitica = () => {\n    window.open(\"https://habitica.com/\");\n  };\n  return (\n    <thead>\n      <tr>\n        <th>\n          <div className=\"section-header\">\n            <div className=\"section-header-title\" onClick={openHabitica}>\n              <h2>{props.title}</h2>\n              {/* <div\n                role=\"button\"\n                className=\"show-no-history clickable\"\n                title=\"Show/Hide tasks with no data\"\n                onClick={() => props.setShowNoHistory(!props.showNoHistory)}\n              >\n                {props.showNoHistory ? (\n                  <FoldIcon aria-hidden=\"true\" />\n                ) : (\n                  <UnfoldIcon aria-hidden=\"true\" />\n                )}\n              </div> */}\n            </div>\n          </div>\n        </th>\n        {context.dates.map((day) => (\n          <th key={day.toString()}>\n            <div className=\"date date-heading\">\n              <span>{day.format(\"ddd\")}</span>\n              <span>{day.format(\"DD\")}</span>\n            </div>\n          </th>\n        ))}\n      </tr>\n    </thead>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport dayjs from \"dayjs\";\n\nimport { Task } from \"./HabiticaTypes\";\nimport { DATE_KEY_FORMAT } from \"./App\";\nimport { AppContext } from \"./UserHistory\";\nimport { TaskIcon } from \"./TaskIcon\";\nimport HistoryTableHeader from \"./HistoryTableHeader\";\nimport logger from \"./logger\";\n\nvar md = require(\"habitica-markdown\");\n\nexport interface HabitHistoryProps {\n  data: Task[];\n}\n\nexport default function HabitHistory(props: HabitHistoryProps) {\n  const [showNoHistory, setShowNoHistory] = useState(true);\n\n  return (\n    <section className=\"habits\">\n      <table>\n        <HistoryTableHeader\n          title=\"Habits\"\n          setShowNoHistory={setShowNoHistory}\n          showNoHistory={showNoHistory}\n        />\n        <tbody>\n          {props.data.map((habit) => (\n            <Habit key={habit.id} showNoHistory={showNoHistory} habit={habit} />\n          ))}\n        </tbody>\n      </table>\n    </section>\n  );\n}\n\nexport function Habit(props: { habit: Task; showNoHistory: boolean }) {\n  const context = useContext(AppContext);\n  const historyMap = new Map<string, [number, number]>();\n  const { text, history } = props.habit;\n\n  logger.debug(text);\n  for (let record of history) {\n    let taskDate = dayjs(record.date).format(DATE_KEY_FORMAT);\n    logger.debug(JSON.stringify(record));\n    if (record.scoredUp !== undefined && record.scoredDown !== undefined) {\n      historyMap.set(taskDate, [record.scoredUp, record.scoredDown]);\n    }\n  }\n\n  const dailyScores = context.dates\n    .map((day) => day.format(DATE_KEY_FORMAT))\n    .map((day) => ({\n      day,\n      score: historyMap.get(day)\n    }));\n\n  if (\n    dailyScores.filter(({score}) => score !== undefined).length === 0 &&\n    !props.showNoHistory\n  ) {\n    // Don't render the component if showNoHistory is off.\n    return null;\n  }\n\n  return (\n    <tr>\n      <td className=\"task-name-row\">\n        {/* <TaskIcon task={props.habit} /> */}\n        <span\n          className=\"task-name\"\n          dangerouslySetInnerHTML={{ __html: md.render(text) }}\n        />\n      </td>\n      {dailyScores.map(({day, score}) => {\n        if (score) {\n          return <HabitScore key={day} up={score[0]} down={score[1]} />;\n        } else if (day !== dayjs(new Date()).format(DATE_KEY_FORMAT)) {\n          return (\n            <td key={day} className=\"habit-cell\">\n              <div className=\"habit-score-container\">\n                <div className=\"fail center-wrapper\">\n                  <span>✖</span>\n                </div>\n              </div>\n            </td>\n          )\n        } else {\n          return <td key={day} className=\"habit-cell\">&nbsp;</td>;\n        }\n      })}\n    </tr>\n  );\n}\n\nfunction HabitScore(props: { up: number; down: number }) {\n  let colour = props.up >= 4 ? \"success\" : \"fail\";\n  return (\n    <td className=\"habit-cell\">\n      <div className=\"habit-score-container\">\n        {props.up > 0 ? (\n          <div className={[colour, \"center-wrapper\"].join(' ')}>\n            <span>+{props.up}</span>\n          </div>\n        ) : (\n          <div className=\"fail center-wrapper\">\n            <span>{props.up}</span>\n          </div>\n        )}\n        {/* {props.down > 0 && (\n          <div className=\"fail center-wrapper\">\n            <span>-{props.down}</span>\n          </div>\n        )} */}\n      </div>\n    </td>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport dayjs from \"dayjs\";\n\nimport { DATE_KEY_FORMAT } from \"./App\";\nimport { Task } from \"./HabiticaTypes\";\nimport { AppContext } from \"./UserHistory\";\nimport { TaskIcon } from \"./TaskIcon\";\nimport HistoryTableHeader from \"./HistoryTableHeader\";\nimport logger from \"./logger\";\nimport { Habit } from \"./HabitHistory\";\n\nvar md = require(\"habitica-markdown\");\n\nexport interface DailyHistoryProps {\n  data: Task[];\n}\n\nexport default function DailyHistory(props: DailyHistoryProps) {\n  const [showNoHistory, setShowNoHistory] = useState(true);\n\n  return (\n    <section className=\"dailys\">\n      <table>\n        <HistoryTableHeader\n          title=\"Habits\"\n          setShowNoHistory={setShowNoHistory}\n          showNoHistory={showNoHistory}\n        />\n        <tbody>\n          {props.data.map((daily) => daily.type === 'habit' ? (\n            <Habit key={daily.id} showNoHistory={showNoHistory} habit={daily} />\n          ) : (\n            <Daily key={daily.id} showNoHistory={showNoHistory} daily={daily} />\n          ))}\n        </tbody>\n      </table>\n      <div\n        className=\"link show-no-history\"\n        onClick={() => setShowNoHistory(!showNoHistory)}\n      ></div>\n    </section>\n  );\n}\n\nexport function Daily(props: { daily: Task; showNoHistory: boolean }) {\n  const context = useContext(AppContext);\n  const historyMap = new Map<string, number>();\n\n  const { text, history } = props.daily;\n\n  logger.debug(text);\n  for (let i = 1; i < history.length; i++) {\n    const delta = history[i].value - history[i - 1].value;\n    let taskUpdateTime = dayjs(history[i].date);\n    logger.debug(\n      taskUpdateTime.format(\"YYYY-MM-DD HH:mm:ss\") + \": \" + history[i].value\n    );\n    // Only consider times when the task value changes (or the first value).\n    if (delta !== 0) {\n      // This task update was done via cron so the task was actually done the\n      // day before.\n      if (\n        context.cronIntervals.search(\n          taskUpdateTime.unix(),\n          taskUpdateTime.unix()\n        ).length > 0\n      ) {\n        // Daily could have been completed twice in the cron time so if a\n        // completion already exists for yesterday then this completion must be\n        // for today.\n        const oneDayAgo = taskUpdateTime.subtract(1, \"day\");\n        if (!historyMap.has(oneDayAgo.format(DATE_KEY_FORMAT))) {\n          taskUpdateTime = oneDayAgo;\n        } else {\n          if (historyMap.has(taskUpdateTime.format(DATE_KEY_FORMAT))) {\n            logger.warn(\n              `Too many completions for ${text} on ${taskUpdateTime}`\n            );\n          }\n        }\n      }\n      const taskDate = taskUpdateTime.format(DATE_KEY_FORMAT);\n      historyMap.set(taskDate, delta);\n    }\n  }\n  console.groupEnd();\n\n  const dailyDeltas = context.dates\n    .map((day) => day.format(DATE_KEY_FORMAT))\n    .map((day) => ({\n      day,\n      delta: historyMap.get(day)\n    }));\n\n  if (\n    dailyDeltas.filter(({delta}) => delta !== undefined).length === 0 &&\n    !props.showNoHistory\n  ) {\n    // Don't render the component if showNoHistory is off.\n    return null;\n  }\n\n  return (\n    <tr>\n      <td className=\"task-name-row\">\n        {/* <TaskIcon task={props.daily} /> */}\n        <span\n          className=\"task-name\"\n          dangerouslySetInnerHTML={{ __html: md.render(text) }}\n        />\n      </td>\n      {dailyDeltas.map(({day, delta}) => (\n        <DailyStatus key={day} delta={delta!} />\n      ))}\n    </tr>\n  );\n}\n\nfunction DailyStatus(props: { delta: number | undefined }) {\n  let classNames = [\"daily-cell\"];\n  let symbol;\n  if (!props.delta || props.delta === 0) {\n    classNames.push(\"pass\");\n    symbol = \"\\xa0\";\n  } else if (props.delta > 0) {\n    classNames.push(\"success\");\n    symbol = \"✓\";\n  } else {\n    classNames.push(\"fail\");\n    symbol = \"✖\";\n  }\n  return (\n    <td className={classNames.join(\" \")}>\n      {symbol && (\n        <div className=\"center-wrapper\">\n          <span className=\"symbol\">{symbol}</span>\n        </div>\n      )}\n    </td>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport IntervalTree from \"node-interval-tree\";\nimport dayjs, { Dayjs } from \"dayjs\";\nimport Confetti from 'react-confetti';\nimport Button from 'react-bootstrap/Button';\nimport logger from \"./logger\";\n\nimport { Task, History } from \"./HabiticaTypes\";\nimport DailyHistory from \"./DailyHistory\";\n\nexport const DATE_KEY_FORMAT = \"YYYYMMDD\";\n\nconst HABITICA_API_URL = \"https://habitica.com/api/v3\";\nconst CLIENT_KEY = \"0d9428fd-d6fa-45f3-a4db-f130e3ef10ea-HabiticaTracker\";\nconst USER_PATH = \"/user\";\nconst TASKS_PATH = \"/tasks/user\";\nconst TODOS_COMPLETED_PATH = \"/tasks/user?type=completedTodos\";\nconst DEFAULT_NUM_DAYS_TO_SHOW = 7;\n\n/**\n * Tasks completed during Cron time are tasks which were completed the previous\n * day. These are different from tasks which were completed at other times\n * which are assigned to the date on which they were completed. The Cron time\n * is used to guess at which tasks fall into each category. Because the task\n * completion time is not exactly equal to the cron time, this constant is used\n * to create a Cron time buffer to designate all tasks which were completed\n * this amount of time before the Cron time as Cron tasks.\n */\nconst CRON_BUFFER_DURATION_SECONDS = 300;\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRandomInt(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nfunction setRandConfettiNum() {\n  return getRandomInt(2000, 5000)\n}\n\nexport const AppContext = React.createContext({\n  showTaskIcons: false,\n  dates: Array<Dayjs>(),\n  cronIntervals: new IntervalTree(),\n});\n\ninterface UserHistoryProps {\n  userId: string;\n  userApiKey: string;\n  setError: (errorMessage: Error) => void;\n}\n\nexport default function UserHistory(props: UserHistoryProps) {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  const [showConfetti, setShowConfetti] = useState<boolean>(false);\n  const [numberOfPieces, setNumberOfPieces] = useState<number>(setRandConfettiNum());\n\n  // App states\n  const [isLoadingUserData, setLoadingUserData] = useState(true);\n  const [isLoadingTaskData, setLoadingTaskData] = useState(true);\n  const [isLoadingTodoData, setLoadingTodoData] = useState(true);\n\n  // User options\n  const [numDaysToShow, setNumDaysToShow] = useState<number>(\n    DEFAULT_NUM_DAYS_TO_SHOW\n  );\n  const [showTaskIcons, setShowTaskIcons] = useState<boolean>(false);\n\n  // User data\n  const [cronTimes, setCronTimes] = useState<Array<[number, number]>>([]);\n  const [habits, setHabits] = useState<Task[]>([]);\n  const [dailys, setDailys] = useState<Task[]>([]);\n  const [todos, setTodos] = useState<Task[]>([]);\n\n  const { userId, userApiKey } = props;\n\n  const onConfettiComplete = () => {\n    setNumberOfPieces(setRandConfettiNum())\n    setShowConfetti(false)\n  }\n\n  const fetchWithApiKey = (url: string) => {\n    return fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-user\": userId,\n        \"x-api-key\": userApiKey,\n        \"x-client\": CLIENT_KEY,\n      },\n    });\n  };\n\n  const handleApiError = (res: any) => {\n    if (!res.success) {\n      throw new Error(res.message);\n    }\n    return res;\n  };\n\n  const setError = props.setError;\n\n  const readData = () => fetchWithApiKey(HABITICA_API_URL + TASKS_PATH)\n  .then((res) => res.json())\n  .then(handleApiError)\n  .then(\n    (result) => {\n      setHabits(result.data.filter((task: Task) => task.type === \"habit\"));\n      setDailys(result.data.filter((task: Task) => task.type === \"daily\"));\n      setLoadingTaskData(false);\n      console.log(HABITICA_API_URL + TASKS_PATH, JSON.stringify(result));\n    },\n    (error) => {\n      setError(error);\n    }\n  );\n\n  const scoreTask = (taskId: string) => {\n    return fetch(\n      HABITICA_API_URL + '/tasks/' + taskId + '/score/up',\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-user\": userId,\n          \"x-api-key\": userApiKey,\n          \"x-client\": CLIENT_KEY,\n        },\n      }\n    ).then((res) => res.json())\n    .then(handleApiError)\n    .then(\n      (result) => {\n        setShowConfetti(true)\n        console.log(HABITICA_API_URL + '/tasks/' + taskId + '/score/up', JSON.stringify(result));\n      },\n      (error) => {\n        setError(error);\n      })\n    .then(readData);\n  }\n\n  const dailyGoal = () => scoreTask('b85dc3ec-7836-4827-aa68-e7e605c1489e')\n\n  const scorePomodoro = () => scoreTask('ec59d7c1-e692-4b17-b2e0-6b6a76aedcc3')\n\n  const reflect = () => scoreTask('13ab931b-b04a-47f0-9555-ad3bc4428dd6')\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Fetch user data to get cron times.\n  useEffect(() => {\n    fetchWithApiKey(HABITICA_API_URL + USER_PATH)\n      .then((res) => res.json())\n      .then(handleApiError)\n      .then(\n        (result) => {\n          setCronTimes(\n            result.data.history.exp.map((history: History) => {\n              const cronTime = dayjs(history.date);\n              return [\n                cronTime.unix() - CRON_BUFFER_DURATION_SECONDS,\n                cronTime.unix() + CRON_BUFFER_DURATION_SECONDS,\n              ];\n            })\n          );\n          setLoadingUserData(false);\n        },\n        (error) => {\n          setError(error);\n        }\n      );\n  }, []); // DO NOT REMOVE the empty dependency array\n\n  // Fetch habit and daily data.\n  useEffect(() => {\n    readData()\n  }, []); // DO NOT REMOVE the empty dependency array\n\n  // Fetch completed todos.\n  useEffect(() => {\n    fetchWithApiKey(HABITICA_API_URL + TODOS_COMPLETED_PATH)\n      .then((res) => res.json())\n      .then(handleApiError)\n      .then(\n        (result) => {\n          setTodos(result.data.filter((task: Task) => task.type === \"todo\"));\n          setLoadingTodoData(false);\n        },\n        (error) => {\n          setError(error);\n        }\n      );\n  }, []); // DO NOT REMOVE the empty dependency array\n\n  if (isLoadingUserData || isLoadingTaskData || isLoadingTodoData) {\n    return (\n      <div className=\"App\">\n        <p>Loading...</p>\n      </div>\n    );\n  } else {\n    const cronIntervals = new IntervalTree();\n    cronTimes.forEach((range) => {\n      logger.debug(`cron: ${dayjs.unix(range[0])} - ${dayjs.unix(range[1])}`);\n      cronIntervals.insert(range[0], range[1], true);\n    });\n\n    const appContext = {\n      showTaskIcons: showTaskIcons,\n      dates: getDateArray(numDaysToShow),\n      cronIntervals,\n    };\n\n    return (\n      <div className=\"App\">\n        <AppContext.Provider value={appContext}>\n          {/* <AppControls\n            numDaysToShow={numDaysToShow}\n            setNumDaysToShow={setNumDaysToShow}\n            toggleTaskIcons={() => setShowTaskIcons(!showTaskIcons)}\n          /> */}\n          {/* <div className=\"identity\">\n            <span>Ambitious ♦ Mindful ♦ Disciplined</span>\n          </div> */}\n          <DailyHistory data={[...dailys.slice(0, -1), ...habits, ...dailys.slice(-1)]} />\n          {/* <HabitHistory data={habits} /> */}\n          {/* <TodoHistory data={todos} /> */}\n          <div className=\"buttons-container\">\n            <div className=\"button-container\">\n              <Button variant=\"outline-success\" onClick={dailyGoal}>✓ Daily Goal</Button>\n            </div>\n            <div className=\"button-container\">\n              <Button variant=\"outline-success\" onClick={scorePomodoro}>✓ Pomodoro</Button>\n            </div>\n            <div className=\"button-container\">\n              <Button variant=\"outline-success\" onClick={reflect}>✓ Reflect</Button>\n            </div>\n          </div>\n          <Confetti\n            width={windowDimensions.width}\n            height={windowDimensions.height}\n            run={showConfetti}\n            onConfettiComplete={onConfettiComplete}\n            numberOfPieces={numberOfPieces}\n            recycle={false}\n            tweenDuration={50000}\n          />\n        </AppContext.Provider>\n      </div>\n    );\n  }\n}\n\nfunction AppControls(props: {\n  numDaysToShow: number;\n  setNumDaysToShow: (n: number) => void;\n  toggleTaskIcons: () => void;\n}) {\n  const context = useContext(AppContext);\n  const openHabitica = () => {\n    window.open(\"https://habitica.com/\");\n  };\n  const showMore = () => props.setNumDaysToShow(props.numDaysToShow + 7);\n  const showLess = () => props.setNumDaysToShow(props.numDaysToShow - 7);\n  const monthString = getMonthString(context.dates);\n\n  return (\n    <div className=\"app-controls\">\n      <div className=\"date-header\" onClick={openHabitica}>{monthString}</div>\n      {/* <div className=\"date-header\" onClick={openHabitica}>Habitica</div> */}\n      {/* <div>\n        <span role=\"button\" className=\"link\" onClick={showMore}>\n          +1 week\n        </span>\n        {props.numDaysToShow > 7 ? (\n          <span>\n            <span> / </span>\n            <span role=\"button\" className=\"link\" onClick={showLess}>\n              -1 week\n            </span>\n          </span>\n        ) : null}\n      </div> */}\n      {/* <div className=\"date-header\">{monthString}</div> */}\n      {/* <span\n        role=\"button\"\n        className=\"link\"\n        onClick={props.toggleTaskIcons}\n        title=\"Show/Hide task icons\"\n      >\n        {context.showTaskIcons ? \"-\" : \"+\"} Task Icons\n      </span> */}\n    </div>\n  );\n}\n\nfunction getMonthString(dates: Dayjs[]): string {\n  const monthStart = dates[0];\n  const monthEnd = dates[dates.length - 1];\n  if (monthStart.month() === monthEnd.month()) {\n    return monthEnd.format(\"MMMM YYYY\");\n  }\n  let startFormat = monthStart.year() === monthEnd.year() ? \"MMM\" : \"MMM YYYY\";\n  let endFormat = \"MMM YYYY\";\n  return [monthStart.format(startFormat), monthEnd.format(endFormat)].join(\"–\");\n}\n\n/** Get all the dates to show.  */\nfunction getDateArray(numDays: number): Dayjs[] {\n  return Array(numDays)\n    .fill(0)\n    .map((_, i) => i)\n    .reverse()\n    .map((i) => dayjs().subtract(i, \"day\").startOf(\"day\"));\n}\n","import React, { useState, ChangeEvent } from \"react\";\n\nimport \"./App.css\";\nimport UserHistory from \"./UserHistory\";\n\nexport const DATE_KEY_FORMAT = \"YYYYMMDD\";\n\nexport enum AppState {\n  PROMPT_FOR_USER_CREDS,\n  USER_INPUT_ACCEPTED,\n  ERROR,\n}\n\nfunction App() {\n  const [userId, setUserId] = useState<string>(\"9ebcbcde-d6a2-40d6-9ec1-99de1e5e7470\");\n  const [userApiKey, setUserApiKey] = useState<string>(\"82efbb68-ab5b-426a-bcad-da7fdc3273bb\");\n  const [error, setError] = useState<Error>();\n  const [appState, setAppState] = useState<AppState>(\n    AppState.USER_INPUT_ACCEPTED\n  );\n\n  const setAppError = (error: Error) => {\n    setError(error);\n    setAppState(AppState.ERROR);\n  };\n\n  const handleUserIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setUserId(event.target.value);\n  };\n\n  const handleUserApiKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setUserApiKey(event.target.value);\n  };\n\n  const handleSubmit = (event: React.MouseEvent) => {\n    event.preventDefault();\n    setAppState(AppState.USER_INPUT_ACCEPTED);\n  };\n\n  if (\n    appState === AppState.PROMPT_FOR_USER_CREDS ||\n    appState === AppState.ERROR\n  ) {\n    return (\n      <div className=\"App\">\n        <h1>Habitica Tracker</h1>\n        {error && <div className=\"error\">Error: {error.message}</div>}\n        <p>\n          This tool displays a history of your Habits, Dailies and Todos in\n          Habitica.\n        </p>\n        <p>\n          Your User ID and API key can be found on the{\" \"}\n          <a\n            href=\"https://habitica.com/user/settings/api\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Settings &gt; API\n          </a>{\" \"}\n          page in Habitica.\n        </p>\n        <form className=\"user-api-form\">\n          <div className=\"label-container\">\n            <div className=\"label\">User ID</div>\n            <input\n              type=\"text\"\n              className=\"user-id\"\n              value={userId}\n              onChange={handleUserIdChange}\n            />\n          </div>\n          <div className=\"label-container\">\n            <span className=\"label\">API Key</span>\n            <input\n              type=\"password\"\n              className=\"api-key\"\n              value={userApiKey}\n              onChange={handleUserApiKeyChange}\n              minLength={36}\n            />\n          </div>\n          <div className=\"submit-wrapper\">\n            <input type=\"submit\" value=\"Fetch My Data\" onClick={handleSubmit} />\n          </div>\n        </form>\n        <h2>Note</h2>\n        <ul>\n          <li>\n            Your user ID and API key will be sent to the Habitica servers and\n            nowhere else.\n          </li>\n          <li>\n            This app does not change your Habitica account data. It only fetches\n            and displays data.\n          </li>\n        </ul>\n      </div>\n    );\n  } else {\n    return (\n      <UserHistory\n        userId={userId}\n        userApiKey={userApiKey}\n        setError={setAppError}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"app-wrapper\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}